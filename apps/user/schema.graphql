# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface AbstractBaseEntity {
    "생성시각"
    createdAt: DateTime!
    "생성자"
    createdUserId: Int!
    "삭제여부"
    deleted: Boolean!
    "삭제시각"
    deletedAt: DateTime
    "아이디"
    id: ID!
    "수정시각"
    updatedAt: DateTime!
    "수정자"
    updatedUserId: Int!
}

type FindAccountResponse {
    "계정 정보 ( 휴대폰 번호 1 : 이메일 N 다계정 생성 가능 하므로 ) 복수"
    accounts: [accountInfoDto!]!
}

type LoginPassword {
    "추가 팝업용 정보"
    popupInfo: PopupDto
    "로그인 토큰"
    token: String!
}

type LoginToken {
    "휴대폰 번호 여부"
    isPhoneNumber: Boolean!
    "로그인 토큰"
    token: String!
    "회원 식별자"
    userId: Int!
}

type Mutation {
    "비밀번호 변경"
    changePassword(pwd: ChangePasswordInput!): FindAccountResponse!
    "google 로그인"
    googleLogin(
        "구글 oauth2 제공된 id token"
        idToken: String!
    ): LoginToken!
    "google 로그인 가입"
    googleSignUp(
        "구글 로그인 가입처리"
        socialSignUpDto: GoogleSignUpInput!
    ): LoginToken!
    "로그인"
    login(login: LoginInput!): LoginPassword!
    "휴대폰 인증번호 발송"
    sendSmsVerificationCode(
        "국가 코드"
        country: CountryType!,
        "수신 핸드폰 번호"
        phone: String!
    ): Boolean!
    "유저 임시 비밀번호 발급"
    sendTemporaryPassword(
        "국가 코드"
        country: CountryType!,
        user: FindPasswordInput!
    ): FindAccountResponse!
    "유저 회원가입"
    signup(user: SignUpInput!): LoginToken!
}

type PopupDto {
    "모달 여부"
    isModal: Boolean!
    "검색 단어 (원문)"
    typeName: String!
}

type Query {
    errorTest: String
    "유저 이메일 중복 조회"
    existsUserEmail(email: String!): Boolean!
    "유저 계정(ID) 찾기"
    findAccount(
        "국가 코드"
        country: CountryType!,
        user: FindAccountInput!
    ): FindAccountResponse!
    "test query"
    helloWorld: String!
    "로그인된 내 정보"
    me: User!
    "키워드 검색"
    search(
        "국가 코드"
        country: CountryType!,
        "번역할 문장"
        text: String!
    ): responseSearch!
    "인증번호 확인"
    smsVerifyCodeConfirm(phone: String!, verifyCode: String!): VerifyCodeSign!
}

type User {
    "생성시각"
    createdAt: String!
    "삭제여부"
    deleted: Boolean!
    "삭제시각"
    deletedAt: String
    "이메일"
    email: String!
    "아이디"
    id: ID!
    "소셜로그인 회원가입 여부"
    isSocialLogin: Boolean!
    "가입일"
    joinedAt: String
    "이름"
    name: String!
    "닉네임"
    nickName: String
    "전화번호"
    phone: String
    "프로필 이미지"
    profileImage: String
    "권한"
    role: Role!
    "소셜 provider 고유키"
    socialId: String
    "소셜로그인 제공업체"
    socialProvider: String
    "수정시각"
    updatedAt: String!
}

type UserEntity implements AbstractBaseEntity {
    "관리자메모"
    adminMemo: String
    "생성시각"
    createdAt: DateTime!
    "생성자"
    createdUserId: Int!
    "삭제여부"
    deleted: Boolean!
    "삭제시각"
    deletedAt: DateTime
    "이메일"
    email: String!
    "아이디"
    id: ID!
    "소셜로그인 회원가입 여부"
    isSocialLogin: Boolean!
    "가입일"
    joinedAt: DateTime
    "이름"
    name: String!
    "닉네임"
    nickName: String
    "전화번호"
    phone: String
    "프로필 이미지"
    profileImage: String
    "권한"
    role: Role!
    "소셜 provider 고유키"
    socialId: String
    "소셜로그인 제공업체"
    socialProvider: SocialProvider
    "수정시각"
    updatedAt: DateTime!
    "수정자"
    updatedUserId: Int!
}

type VerifyCodeSign {
    "인증코드 서명값, (인증코드 확인시 발급 된 키)"
    signature: String!
}

type accountInfoDto {
    "이메일 (아이디)"
    email: String!
    "소셜 로그인 여부"
    isSocialLogin: Boolean!
    "소셜 로그인 프로바이더"
    socialProvider: String
}

type responseSearch {
    "메인 검색 결과"
    main: searchDto!
    "연관 검색 결과"
    relations: [searchDto!]!
    "리포트 생성 호출 식별자"
    reportInvokeId: String!
}

type searchDto {
    "30일간의 검색량"
    count: Float
    "식별자"
    id: Float!
    "Quality Score, 10점 만점"
    relevance: Float
    "검색 단어 (원문)"
    text: String!
}

enum CountryType {
    "한국"
    KR
    "말레이시아"
    MY
    "싱가포르"
    SG
    "태국"
    TH
    "대만"
    TW
    "미국"
    US
    "베트남"
    VN
}

enum Role {
    ADMIN
    USER
}

enum SocialProvider {
    GOOGLE
    NAVER
    NONE
}

"A slightly refined version of RFC-3339 compliant DateTime Scalar"
scalar DateTime

input ChangePasswordInput {
    "이메일"
    email: String!
    "신규 비밀번호"
    newPassword: String!
}

input FindAccountInput {
    "전화번호"
    phone: String!
    "인증번호 서명"
    verifyCodeSign: String!
}

input FindPasswordInput {
    "이메일"
    email: String!
    "전화번호"
    phone: String!
    "인증번호 서명"
    verifyCodeSign: String!
}

input GoogleSignUpInput {
    "소셜토큰"
    idToken: String!
    "마케팅 동의여부"
    makettingAgree: Boolean
    "전화번호"
    phone: String!
    "인증번호 서명"
    verifyCodeSign: String!
}

input LoginInput {
    "이메일"
    email: String!
    "패스워드"
    password: String!
}

input SignUpInput {
    "이메일"
    email: String!
    "마케팅 동의여부"
    makettingAgree: Boolean
    "이름"
    name: String!
    "닉네임"
    nickName: String
    "패스워드"
    password: String!
    "전화번호"
    phone: String!
    "인증코드 서명"
    verifyCodeSign: String!
}
